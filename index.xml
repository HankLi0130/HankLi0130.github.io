<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hank Li</title><link>https://hankli0130.github.io/</link><description>Recent content on Hank Li</description><generator>Hugo -- gohugo.io</generator><language>en-ca</language><lastBuildDate>Wed, 28 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://hankli0130.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>First head Socks5</title><link>https://hankli0130.github.io/post/2023/06/28/first_head_socks5/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://hankli0130.github.io/post/2023/06/28/first_head_socks5/</guid><description>What is Socks protocol? SOCKS is an Internet protocol that exchanges network packets between a client and server through a proxy server.
What is Socks5 protocol? SOCKS5 optionally provides authentication so only authorized users may access a server. Practically, a SOCKS server proxies TCP connections to an arbitrary IP address, and provides a means for UDP packets to be forwarded.
How to use Socks5? Setup a Socks5 server I created an Ubuntu 22.</description></item><item><title>Single choice dialog with Jetpack Compose</title><link>https://hankli0130.github.io/post/2023/06/14/single_choice_dialog_with_jetpack_compose/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://hankli0130.github.io/post/2023/06/14/single_choice_dialog_with_jetpack_compose/</guid><description>Alertdialog Example A car selection with single choice dialog with Jetpack Compose
Go to my GitHub to see more detail.</description></item><item><title>UDP load balancing using NGINX</title><link>https://hankli0130.github.io/post/2023/06/05/nginx_udp_load_balancing/</link><pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate><guid>https://hankli0130.github.io/post/2023/06/05/nginx_udp_load_balancing/</guid><description>Setup NGINX as an UDP load balancer TCP and UDP Load Balancing
How to do it? Configuration - nginx.conf I used default nginx.conf and added stream block.
user www-data; worker_processes auto; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events { worker_connections 768; # multi_accept on; } stream { upstream leaf_servers { server leaf1.teontest.site:1443; # UDP port server 1 server leaf2.teontest.site:1443; # UDP port server 2 } server { listen 1443 udp; # listen UDP port proxy_pass leaf_servers; } } http { ## # Basic Settings ## sendfile on; tcp_nopush on; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include /etc/nginx/mime.</description></item><item><title>Bili Talk</title><link>https://hankli0130.github.io/project/bili_talk/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://hankli0130.github.io/project/bili_talk/</guid><description>Bili talk is the project I worked on when I was in MiiiTech. It&amp;rsquo;s a chatting app, like WeChat.
My responsibility Implemented new features and fixed bugs. Deployed the backend services with Docker. Tech Stack Java (language) Socket Android foreground service App Previews</description></item><item><title>Baisoli</title><link>https://hankli0130.github.io/project/baisoli/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><guid>https://hankli0130.github.io/project/baisoli/</guid><description>Baisoli is a village social meida. It helps chief of village communicate with his/her residents easly.
My responsibility Built the app from scratch. Tech Stack Kotlin (language) MVVM (architecture), navigation components KOIN (dependency injection) Kotlin coroutines Firebase UI, Firestore, Storage, Authentication OkHttp, Retrofit Glide App Previews</description></item><item><title>Build your own website using Hugo</title><link>https://hankli0130.github.io/post/2020/08/25/build_your_own_website_using_hugo/</link><pubDate>Tue, 25 Aug 2020 17:25:39 +0800</pubDate><guid>https://hankli0130.github.io/post/2020/08/25/build_your_own_website_using_hugo/</guid><description>Why Hugo? As a developer, I need a website to recode the things I&amp;rsquo;ve done. I found out Hugo is perfect for blogs and it&amp;rsquo;s easy to use. I&amp;rsquo;m gonna share how to create your own website using Hugo and deploy it to GitHub.
Let&amp;rsquo;s get it started Step 1: Install Hugo I recommend Homebrew to install Hugo because it&amp;rsquo;s really easy if you&amp;rsquo;re using macOS.
Open your terminal and type:</description></item><item><title>Kinton</title><link>https://hankli0130.github.io/project/kinton/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><guid>https://hankli0130.github.io/project/kinton/</guid><description>Kinton is one of my side projects, which is a online menu app and it helps customers order ramen online.
GitHub
Tech Stack Kotlin (language) MVVM (architecture), liveData, bottom navigation KOIN (dependency injection) Firebase authentication Moshi (JSON) Zxing (QR code) App Previews</description></item></channel></rss>